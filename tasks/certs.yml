---
    - name: Create system PKI directory {{ pki_dir }}
      ansible.builtin.file:
        path: "{{ pki_dir }}"
        owner: root
        group: root
        mode: '1644'
        state: directory

    - name: Create system TEMP PKI directory in opt
      ansible.builtin.file:
        path: "/opt/temp-pki-cache"
        owner: root
        group: root
        mode: '1644'
        state: directory

    - name: Creating OpenEMR web application directory
      ansible.builtin.file:
        path: "/var/www/html/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - private
        - private/notes

    - name: Installing dependicies for ansible openssl
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - epel-release
        - python3-cryptography
        - python3-pexpect.noarch

### Creat root CA
    - name: Create Root CA private key with password protection
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/ca.key"
        cipher: auto # Could update exampel
        passphrase: "{{ ca_passphrase }}"

    - name: Create certificate signing request (CSR) for Root CA certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/ca.key"
        privatekey_passphrase: "{{ ca_passphrase }}"
        common_name: "Dite CA"
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ pki_dir }}/ca.pem"
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "{{ pki_dir }}/ca.key"
        privatekey_passphrase: "{{ ca_passphrase }}"
        provider: selfsigned

### Create intermediate CA

    - name: "Create Intermediate CA private key with password protection"
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/ca-{{ item }}.key"
        cipher: auto # Could update exampel
        passphrase: "{{ ca_passphrase }}"
      with_items:
        - http
        - ssh
        - docker

    - name: "Create certificate signing request (CSR) for Intermediate CA's certificate"
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/ca-{{ item }}.key"
        privatekey_passphrase: "{{ ca_passphrase }}"
        common_name: "Dite Intermediate {{ item }} CA"
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: "ca_csr"
      with_items:
        - http
        - ssh
        - docker

    - name: "Create signed Intermediate CA certificates from the CSR"
      community.crypto.x509_certificate:
        path: "{{ item.privatekey | replace('key','pem') }}"
        csr_content: "{{ item.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca.key"
        ownca_privatekey_passphrase: "{{ ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      with_items: "{{ ca_csr.results }}"

    - name: Read in the nessoary ca file to create a certitificate bundle
      command: "awk 1 {{ hostsfiles | join(' ') }}"
      register: cert_bundle


    #- name: Write certificate file onacreage
    #  copy:
    #    dest: "{{ pki_dir }}/web_cert_bundle.pem"
    #    content: "{{ ca_csr.results[0].public_key }}"
    #  delegate_to: 192.168.56.10
    #  run_once: true
    #  when: ca_csr is changed


    # Consider symlinking
    - name: Copy CA certicates to trust anchor, on system 
      copy:
        src: "{{ pki_dir }}/{{ item }}"
        dest: "/usr/share/pki/ca-trust-source/anchors/{{ item }}"
        remote_src: yes
      with_items:
        - "ca.pem"
        - "ca-http.pem"
        - "ca-docker.pem"
      notify:
        - Update trust store

    #Double check this value.
    - name: Copy SSH certicates to SSH directory 
      copy:
        src: "{{ pki_dir }}/{{ item }}"
        dest: "{{ ssh_dir }}/{{ item }}"
        remote_src: yes
      with_items:
        - "ca.pem"
        - "ca-ssh.pem"

### Create x509 general certifictes

    - name: Create private key for new certificate onacreage
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/certificate.key"
      delegate_to: 192.168.56.10
      run_once: true

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/certificate.key"
        subject_alt_name:
          - "DNS: acreage.dite.local"
      delegate_to: 192.168.56.10
      run_once: true
      register: csr

    - name: Check whether certificate exists
      stat:
        path: "{{ pki_dir }}/certificate.pem"
      delegate_to: 192.168.56.10
      run_once: true
      register: certificate_exists

    - name: Read existing certificate if exists
      slurp:
        src: "{{ pki_dir }}/certificate.pem"
      when: certificate_exists.stat.exists
      delegate_to: 192.168.56.10
      run_once: true
      register: certificate

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (certificate.content | b64decode) if certificate_exists.stat.exists else omit }}"
        csr_content: "{{ csr.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca.key"
        ownca_privatekey_passphrase: "{{ ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: 192.168.56.10
      run_once: true
      register: certificate

    - name: Write certificate file onacreage
      copy:
        dest: "{{ pki_dir }}/certificate.pem"
        content: "{{ certificate.certificate }}"
      delegate_to: 192.168.56.10
      run_once: true
      when: certificate is changed

#### Create web certificates

    - name: Create private key for HTTP sevice onacreage
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/http.key"
      delegate_to: 192.168.56.10
      run_once: true

    - name: Create certificate signing request (CSR) for new HTTP certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/http.key"
        common_name: acreage
        subject_alt_name:
          - "DNS: acreage.dite.local"
          - "DNS: dite.local"
          - "IP:192.168.56.10"
      delegate_to: 192.168.56.10
      run_once: true
      register: csr_web

    - name: Check whether HTTP certificate exists
      stat:
        path: "{{ pki_dir }}/http.pem"
      delegate_to: 192.168.56.10
      run_once: true
      register: http_exists

    - name: Read existing HTTP certificate if exists
      slurp:
        src: "{{ pki_dir }}/http.pem"
      when: http_exists.stat.exists
      delegate_to: 192.168.56.10
      run_once: true
      register: http

    - name: Sign HTTP certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (http.content | b64decode) if http_exists.stat.exists else omit }}"
        csr_content: "{{ csr_web.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-http.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-http.key"
        ownca_privatekey_passphrase: "{{ ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: 192.168.56.10
      run_once: true
      register: http_cert

    - name: Write HTTP certificate file onacreage
      copy:
        dest: "{{ pki_dir }}/http.pem"
        content: "{{ http_cert.certificate }}"
      delegate_to: 192.168.56.10
      run_once: true
      when: http_cert is changed

#### create Client Auth certificate

    - name: Create private key for HTTP Client certificate
      community.crypto.openssl_privatekey:
        path: "{{ notes_web_dir }}/http-client.key"
      delegate_to: 192.168.56.10
      run_once: true

    - name: Create certificate signing request (CSR) for new HTTP Client certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ notes_web_dir }}/http-client.key"
        common_name: email:admin@dite.local
        subject_alt_name:
          - "email:admin@dite.local"
        keyUsage:
          - nonRepudiation
          - digitalSignature
          - keyEncipherment
        extendedKeyUsage:
          - "clientAuth"
      delegate_to: 192.168.56.10
      run_once: true
      register: csr_client

    - name: Check whether HTTP Client certificate exists
      stat:
        path: "{{ notes_web_dir }}/http-client.pem"
      delegate_to: 192.168.56.10
      run_once: true
      register: certificate_client_exists

    - name: Read existing web certificate if exists
      slurp:
        src: "{{ notes_web_dir }}/http-client.pem"
      when: certificate_client_exists.stat.exists
      delegate_to: 192.168.56.10
      run_once: true
      register: certificate_client

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (certificate_client.content | b64decode) if certificate_client_exists.stat.exists else omit }}"
        csr_content: "{{ csr_client.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-http.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-http.key"
        ownca_privatekey_passphrase: "{{ ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: 192.168.56.10
      run_once: true
      register: certificate_client_cert

    - name: Write certificate file onacreage
      copy:
        dest: "{{ notes_web_dir }}/http-client.pem"
        content: "{{ certificate_client_cert.certificate }}"
      delegate_to: 192.168.56.10
      run_once: true
      when: certificate_client_cert is changed


    #### Create Docker certificates

    - name: Create private key for new Docker certificate
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/docker.key"
      delegate_to: 192.168.56.10
      run_once: true

    - name: Create certificate signing request (CSR) for new Docker certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/docker.key"
        common_name: DNS:docker
        subject_alt_name:
          - "DNS:docker.acreage.dite.local"
          - "DNS:acreage.dite.local"
          - "IP:192.168.56.10"
        keyUsage:
          - nonRepudiation
          - digitalSignature
          - keyEncipherment
        extendedKeyUsage:
          - "serverAuth"
          - "clientAuth"
      delegate_to: 192.168.56.10
      run_once: true
      register: docker_csr

    - name: Check whether Docker certificate exists
      stat:
        path: "{{ pki_dir }}/docker.pem"
      delegate_to: 192.168.56.10
      run_once: true
      register: docker_exists

    - name: Read existing Docker certificate if exists
      slurp:
        src: "{{ pki_dir }}/docker.pem"
      when: docker_exists.stat.exists
      delegate_to: 192.168.56.10
      run_once: true
      register: docker

    - name: Sign Docker certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (docker.content | b64decode) if docker_exists.stat.exists else omit }}"
        csr_content: "{{ docker_csr.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-docker.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-docker.key"
        ownca_privatekey_passphrase: "{{ ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: 192.168.56.10
      run_once: true
      register: docker

    - name: Write Docker certificate file 
      copy:
        dest: "{{ pki_dir }}/docker.pem"
        content: "{{ docker.certificate }}"
      delegate_to: 192.168.56.10
      run_once: true
      when: docker is changed
      notify:
        - restart docker

    - name: Copy CA certicates to trust anchor 
      copy:
        src: "{{ pki_dir }}/{{ item }}"
        dest: "/var/www/html/private/notes/{{ item }}"
        remote_src: yes
        mode: '0644'
      with_items:
        - "ca.pem"
        - "ca-http.pem"
      notify:
        - Update trust store

    - name: Generate PKCS#12 file
      community.crypto.openssl_pkcs12:
        action: export
        path: "{{ notes_web_dir }}/web.p12"
        friendly_name: admin
        privatekey_path: "{{ notes_web_dir }}/http-client.key"
        certificate_path: "{{ notes_web_dir }}/http-client.pem"
        other_certificates_parse_all: true
        other_certificates:
          - "{{ notes_web_dir }}/ca.pem"
          - "{{ notes_web_dir }}/ca-http.pem"
        state: present
        mode: '0644'

    - name: Write CA certifctae to file temp cache
      copy:
        dest: "{{ pki_dir }}/ca.key"
        content: "/opt/temp-pki-cache/ca.key"
        mode: '0644'
        setype:
      delegate_to: 192.168.56.10
      run_once: true