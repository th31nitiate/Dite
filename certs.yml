---
    - name: Create directory {{ pki_dir }}
      ansible.builtin.file:
        path: "{{ pki_dir }}"
        owner: root
        group: root
        mode: '1644'
        state: directory



#/etc/ssh/ca-ssh-certificate.key
### Creat root CA
    - name: Create private key with password protection
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/ca-certificate.key"
        cipher: auto # Could update exampel
        passphrase: "{{ secret_ca_passphrase }}"

    - name: Create certificate signing request (CSR) for CA certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/ca-certificate.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        common_name: "Ansible CA"
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ pki_dir }}/ca-certificate.pem"
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "{{ pki_dir }}/ca-certificate.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        provider: selfsigned

### Create intermediate CA

    - name: "Create {{ item }} private key with password protection"
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/ca-{{ item }}-certificate.key"
        cipher: auto # Could update exampel
        passphrase: "{{ secret_ca_passphrase }}"
      with_items:
        - http
        - ssh
        - docker

    - name: "Create {{ item }} certificate signing request (CSR) for CA certificate"
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/ca-{{ item }}-certificate.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        common_name: "Ansible CA {{ item }}"
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: "ca_csr"
      with_items:
        - http
        - ssh
        - docker

    - name: "Create self-signed {{ item.item }} in CA certificate from CSR"
      community.crypto.x509_certificate:
        path: "{{ pki_dir }}/ca-{{ item.item }}-certificate.pem"
        csr_content: "{{ item.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-certificate.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-certificate.key"
        ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      with_items: "{{ ca_csr.results }}"


    - name: read files
      command: "awk 1 {{ hostsfiles | join(' ') }}"
      register: cert_bundle
    - name: create hosts file
      copy:
        dest: "{{ pki_dir }}/ca_cert_bundle.pem"
        content: "{{ cert_bundle.stdout_lines | unique |join('\n') }}"


    #- name: Write certificate file on dev
    #  copy:
    #    dest: "{{ pki_dir }}/web_cert_bundle.pem"
    #    content: "{{ ca_csr.results[0].public_key }}"
    #  delegate_to: dev.o3h.local
    #  run_once: true
    #  when: ca_csr is changed

    - name: Copy CA certicates to trust anchor 
      copy:
        src: "{{ pki_dir }}/{{ item }}"
        dest: "/usr/share/pki/ca-trust-source/anchors/{{ item }}"
        remote_src: yes
      with_items:
        - "ca-certificate.pem"
        - "ca-http-certificate.pem"
        - "ca-docker-certificate.pem"
      notify:
        - Update trust store

    - name: Copy SSH certicates to docker directory 
      copy:
        src: "{{ pki_dir }}/{{ item }}"
        dest: "{{ ssh_dir }}/{{ item }}"
        remote_src: yes
      with_items:
        - "ca-certificate.pem"
        - "ca-ssh-certificate.pem"
      notify:
        - Restart docker

#Need to run after update anchors after

### Create x509 general certifictes

    - name: Create private key for new certificate on dev
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/certificate.key"
      delegate_to: dev.o3h.local
      run_once: true

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/certificate.key"
        subject_alt_name:
          - "DNS:docs.ansible.com"
      delegate_to: dev.o3h.local
      run_once: true
      register: csr

    - name: Check whether certificate exists
      stat:
        path: "{{ pki_dir }}/certificate.pem"
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate_exists

    - name: Read existing certificate if exists
      slurp:
        src: "{{ pki_dir }}/certificate.pem"
      when: certificate_exists.stat.exists
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (certificate.content | b64decode) if certificate_exists.stat.exists else omit }}"
        csr_content: "{{ csr.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-certificate.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-certificate.key"
        ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate

    - name: Write certificate file on dev
      copy:
        dest: "{{ pki_dir }}/certificate.pem"
        content: "{{ certificate.certificate }}"
      delegate_to: dev.o3h.local
      run_once: true
      when: certificate is changed

#### Create web certificates

    - name: Create private key for new certificate on dev
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/certificate-http.key"
      delegate_to: dev.o3h.local
      run_once: true

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/certificate-http.key"
        common_name: DNS:dev.o3h.local
        subject_alt_name:
          - "DNS:dev.o3h.local"
          - "DNS:dev.o3h"
      delegate_to: dev.o3h.local
      run_once: true
      register: csr_web

    - name: Check whether certificate exists
      stat:
        path: "{{ pki_dir }}/certificate-http.pem"
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate_web_exists

    - name: Read existing  wevbcertificate if exists
      slurp:
        src: "{{ pki_dir }}/certificate-http.pem"
      when: certificate_web_exists.stat.exists
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate_web

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (certificate_web.content | b64decode) if certificate_web_exists.stat.exists else omit }}"
        csr_content: "{{ csr_web.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-http-certificate.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-http-certificate.key"
        ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate_web_cert

    - name: Write certificate file on dev
      copy:
        dest: "{{ pki_dir }}/certificate-http.pem"
        content: "{{ certificate_web_cert.certificate }}"
      delegate_to: dev.o3h.local
      run_once: true
      when: certificate_web_cert is changed

#### create Client Auth certificate

    - name: Create private key for new certificate on dev
      community.crypto.openssl_privatekey:
        path: "{{ notes_web_dir }}/http-client.key"
      delegate_to: dev.o3h.local
      run_once: true

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ notes_web_dir }}/http-client.key"
        common_name: email:webadmin@o3h.local
        subject_alt_name:
          - "email:webadmin.o3h.local"
          - "IP:192.168.56.10"
        keyUsage:
          - nonRepudiation
          - digitalSignature
          - keyEncipherment
        extendedKeyUsage:
          - "clientAuth"
      delegate_to: dev.o3h.local
      run_once: true
      register: csr_client

    - name: Check whether certificate exists
      stat:
        path: "{{ notes_web_dir }}/http-client.pem"
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate_client_exists

    - name: Read existing web certificate if exists
      slurp:
        src: "{{ notes_web_dir }}/http-client.pem"
      when: certificate_client_exists.stat.exists
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate_client

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (certificate_client.content | b64decode) if certificate_client_exists.stat.exists else omit }}"
        csr_content: "{{ csr_client.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-http-certificate.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-http-certificate.key"
        ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: dev.o3h.local
      run_once: true
      register: certificate_client_cert

    - name: Write certificate file on dev
      copy:
        dest: "{{ notes_web_dir }}/http-client.pem"
        content: "{{ certificate_client_cert.certificate }}"
      delegate_to: dev.o3h.local
      run_once: true
      when: certificate_client_cert is changed


#### Create web certificates

    - name: Create private key for new certificate on dev
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/docker.key"
      delegate_to: dev.o3h.local
      run_once: true

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ pki_dir }}/docker.key"
        common_name: DNS:docker
        subject_alt_name:
          - "DNS:docker.dev.o3h.local"
          - "DNS:docker.dev.o3h"
          - "IP:192.168.56.10"
        keyUsage:
          - nonRepudiation
          - digitalSignature
          - keyEncipherment
        extendedKeyUsage:
          - "serverAuth"
          - "clientAuth"
      delegate_to: dev.o3h.local
      run_once: true
      register: docker_csr

    - name: Check whether certificate exists
      stat:
        path: "{{ pki_dir }}/docker.pem"
      delegate_to: dev.o3h.local
      run_once: true
      register: docker_exists

    - name: Read existing  wevbcertificate if exists
      slurp:
        src: "{{ pki_dir }}/docker.pem"
      when: docker_exists.stat.exists
      delegate_to: dev.o3h.local
      run_once: true
      register: docker

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (docker.content | b64decode) if docker_exists.stat.exists else omit }}"
        csr_content: "{{ docker_csr.csr }}"
        provider: ownca
        ownca_path: "{{ pki_dir }}/ca-docker-certificate.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca-docker-certificate.key"
        ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: dev.o3h.local
      run_once: true
      register: docker

    - name: Write certificate file on dev
      copy:
        dest: "{{ pki_dir }}/docker.pem"
        content: "{{ docker.certificate }}"
      delegate_to: dev.o3h.local
      run_once: true
      when: docker is changed
      notify:
        - restart docker

    - name: Copy CA certicates to trust anchor 
      copy:
        src: "{{ pki_dir }}/{{ item }}"
        dest: "/var/www/html/private/notes/{{ item }}"
        remote_src: yes
      with_items:
        - "ca-certificate.pem"
        - "ca-web-certificate.pem"